/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace APIGateway.Thrift.Generated.BaseTypes
{

  public partial class Result : TBase
  {
    private string _exceptionstr;
    private string _errorMessage;
    private string _errorCode;
    private global::APIGateway.Thrift.Generated.BaseTypes.Severity _severity;

    public string Exceptionstr
    {
      get
      {
        return _exceptionstr;
      }
      set
      {
        __isset.exceptionstr = true;
        this._exceptionstr = value;
      }
    }

    public string ErrorMessage
    {
      get
      {
        return _errorMessage;
      }
      set
      {
        __isset.errorMessage = true;
        this._errorMessage = value;
      }
    }

    public string ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::APIGateway.Thrift.Generated.BaseTypes.Severity"/>
    /// </summary>
    public global::APIGateway.Thrift.Generated.BaseTypes.Severity Severity
    {
      get
      {
        return _severity;
      }
      set
      {
        __isset.severity = true;
        this._severity = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool exceptionstr;
      public bool errorMessage;
      public bool errorCode;
      public bool severity;
    }

    public Result()
    {
      this._severity = global::APIGateway.Thrift.Generated.BaseTypes.Severity.Information;
      this.__isset.severity = true;
    }

    public Result DeepCopy()
    {
      var tmp4 = new Result();
      if((Exceptionstr != null) && __isset.exceptionstr)
      {
        tmp4.Exceptionstr = this.Exceptionstr;
      }
      tmp4.__isset.exceptionstr = this.__isset.exceptionstr;
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        tmp4.ErrorMessage = this.ErrorMessage;
      }
      tmp4.__isset.errorMessage = this.__isset.errorMessage;
      if((ErrorCode != null) && __isset.errorCode)
      {
        tmp4.ErrorCode = this.ErrorCode;
      }
      tmp4.__isset.errorCode = this.__isset.errorCode;
      if(__isset.severity)
      {
        tmp4.Severity = this.Severity;
      }
      tmp4.__isset.severity = this.__isset.severity;
      return tmp4;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Exceptionstr = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ErrorCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Severity = (global::APIGateway.Thrift.Generated.BaseTypes.Severity)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Exceptionstr != null) && __isset.exceptionstr)
        {
          field.Name = "exceptionstr";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Exceptionstr, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          field.Name = "errorMessage";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ErrorCode != null) && __isset.errorCode)
        {
          field.Name = "errorCode";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.severity)
        {
          field.Name = "severity";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Severity, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Result other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.exceptionstr == other.__isset.exceptionstr) && ((!__isset.exceptionstr) || (System.Object.Equals(Exceptionstr, other.Exceptionstr))))
        && ((__isset.errorMessage == other.__isset.errorMessage) && ((!__isset.errorMessage) || (System.Object.Equals(ErrorMessage, other.ErrorMessage))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (System.Object.Equals(ErrorCode, other.ErrorCode))))
        && ((__isset.severity == other.__isset.severity) && ((!__isset.severity) || (System.Object.Equals(Severity, other.Severity))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Exceptionstr != null) && __isset.exceptionstr)
        {
          hashcode = (hashcode * 397) + Exceptionstr.GetHashCode();
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          hashcode = (hashcode * 397) + ErrorMessage.GetHashCode();
        }
        if((ErrorCode != null) && __isset.errorCode)
        {
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        }
        if(__isset.severity)
        {
          hashcode = (hashcode * 397) + Severity.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Result(");
      int tmp5 = 0;
      if((Exceptionstr != null) && __isset.exceptionstr)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Exceptionstr: ");
        Exceptionstr.ToString(sb);
      }
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("ErrorMessage: ");
        ErrorMessage.ToString(sb);
      }
      if((ErrorCode != null) && __isset.errorCode)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("ErrorCode: ");
        ErrorCode.ToString(sb);
      }
      if(__isset.severity)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Severity: ");
        Severity.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
