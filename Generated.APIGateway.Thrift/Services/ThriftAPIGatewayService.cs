/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace APIGateway.Thrift.Generated.Services
{
  public partial class ThriftAPIGatewayService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertResponse> InsertFromKafkaAsync(global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertRequest insertRequest, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueResponse> SendNotificationAsync(global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueRequest queueRequest, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async global::System.Threading.Tasks.Task<global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertResponse> InsertFromKafkaAsync(global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertRequest insertRequest, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("InsertFromKafka", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new InternalStructs.InsertFromKafkaArgs() {
          InsertRequest = insertRequest,
        };
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new InternalStructs.InsertFromKafkaResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ne)
        {
          throw result.Ne;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertFromKafka failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueResponse> SendNotificationAsync(global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueRequest queueRequest, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SendNotification", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new InternalStructs.SendNotificationArgs() {
          QueueRequest = queueRequest,
        };
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new InternalStructs.SendNotificationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ne)
        {
          throw result.Ne;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SendNotification failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["InsertFromKafka"] = InsertFromKafka_ProcessAsync;
        processMap_["SendNotification"] = SendNotification_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task InsertFromKafka_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new InternalStructs.InsertFromKafkaArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new InternalStructs.InsertFromKafkaResult();
        try
        {
          try
          {
            result.Success = await _iAsync.InsertFromKafkaAsync(args.InsertRequest, cancellationToken);
          }
          catch (global::APIGateway.Thrift.Generated.BaseTypes.NetworkException ne)
          {
            result.Ne = ne;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("InsertFromKafka", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
          if(_logger != null)
            _logger.LogError(ex, sErr);
          else
            Console.Error.WriteLine(sErr);
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("InsertFromKafka", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SendNotification_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new InternalStructs.SendNotificationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new InternalStructs.SendNotificationResult();
        try
        {
          try
          {
            result.Success = await _iAsync.SendNotificationAsync(args.QueueRequest, cancellationToken);
          }
          catch (global::APIGateway.Thrift.Generated.BaseTypes.NetworkException ne)
          {
            result.Ne = ne;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SendNotification", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
          if(_logger != null)
            _logger.LogError(ex, sErr);
          else
            Console.Error.WriteLine(sErr);
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SendNotification", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class InsertFromKafkaArgs : TBase
      {
        private global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertRequest _insertRequest;

        public global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertRequest InsertRequest
        {
          get
          {
            return _insertRequest;
          }
          set
          {
            __isset.insertRequest = true;
            this._insertRequest = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool insertRequest;
        }

        public InsertFromKafkaArgs()
        {
        }

        public InsertFromKafkaArgs DeepCopy()
        {
          var tmp0 = new InsertFromKafkaArgs();
          if((InsertRequest != null) && __isset.insertRequest)
          {
            tmp0.InsertRequest = (global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertRequest)this.InsertRequest.DeepCopy();
          }
          tmp0.__isset.insertRequest = this.__isset.insertRequest;
          return tmp0;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    InsertRequest = new global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertRequest();
                    await InsertRequest.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("InsertFromKafka_args");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            if((InsertRequest != null) && __isset.insertRequest)
            {
              field.Name = "insertRequest";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await InsertRequest.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is InsertFromKafkaArgs other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.insertRequest == other.__isset.insertRequest) && ((!__isset.insertRequest) || (System.Object.Equals(InsertRequest, other.InsertRequest))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((InsertRequest != null) && __isset.insertRequest)
            {
              hashcode = (hashcode * 397) + InsertRequest.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("InsertFromKafka_args(");
          int tmp1 = 0;
          if((InsertRequest != null) && __isset.insertRequest)
          {
            if(0 < tmp1++) { sb.Append(", "); }
            sb.Append("InsertRequest: ");
            InsertRequest.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }


      public partial class InsertFromKafkaResult : TBase
      {
        private global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertResponse _success;
        private global::APIGateway.Thrift.Generated.BaseTypes.NetworkException _ne;

        public global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::APIGateway.Thrift.Generated.BaseTypes.NetworkException Ne
        {
          get
          {
            return _ne;
          }
          set
          {
            __isset.ne = true;
            this._ne = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool ne;
        }

        public InsertFromKafkaResult()
        {
        }

        public InsertFromKafkaResult DeepCopy()
        {
          var tmp2 = new InsertFromKafkaResult();
          if((Success != null) && __isset.success)
          {
            tmp2.Success = (global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertResponse)this.Success.DeepCopy();
          }
          tmp2.__isset.success = this.__isset.success;
          if((Ne != null) && __isset.ne)
          {
            tmp2.Ne = (global::APIGateway.Thrift.Generated.BaseTypes.NetworkException)this.Ne.DeepCopy();
          }
          tmp2.__isset.ne = this.__isset.ne;
          return tmp2;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::APIGateway.Thrift.Generated.KafkaTypes.KafkaInsertResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Ne = new global::APIGateway.Thrift.Generated.BaseTypes.NetworkException();
                    await Ne.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("InsertFromKafka_result");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                field.Name = "Success";
                field.Type = TType.Struct;
                field.ID = 0;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.ne)
            {
              if (Ne != null)
              {
                field.Name = "Ne";
                field.Type = TType.Struct;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await Ne.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is InsertFromKafkaResult other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
            && ((__isset.ne == other.__isset.ne) && ((!__isset.ne) || (System.Object.Equals(Ne, other.Ne))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Ne != null) && __isset.ne)
            {
              hashcode = (hashcode * 397) + Ne.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("InsertFromKafka_result(");
          int tmp3 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp3++) { sb.Append(", "); }
            sb.Append("Success: ");
            Success.ToString(sb);
          }
          if((Ne != null) && __isset.ne)
          {
            if(0 < tmp3++) { sb.Append(", "); }
            sb.Append("Ne: ");
            Ne.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }


      public partial class SendNotificationArgs : TBase
      {
        private global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueRequest _queueRequest;

        public global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueRequest QueueRequest
        {
          get
          {
            return _queueRequest;
          }
          set
          {
            __isset.queueRequest = true;
            this._queueRequest = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool queueRequest;
        }

        public SendNotificationArgs()
        {
        }

        public SendNotificationArgs DeepCopy()
        {
          var tmp4 = new SendNotificationArgs();
          if((QueueRequest != null) && __isset.queueRequest)
          {
            tmp4.QueueRequest = (global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueRequest)this.QueueRequest.DeepCopy();
          }
          tmp4.__isset.queueRequest = this.__isset.queueRequest;
          return tmp4;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    QueueRequest = new global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueRequest();
                    await QueueRequest.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("SendNotification_args");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            if((QueueRequest != null) && __isset.queueRequest)
            {
              field.Name = "queueRequest";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await QueueRequest.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SendNotificationArgs other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.queueRequest == other.__isset.queueRequest) && ((!__isset.queueRequest) || (System.Object.Equals(QueueRequest, other.QueueRequest))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((QueueRequest != null) && __isset.queueRequest)
            {
              hashcode = (hashcode * 397) + QueueRequest.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("SendNotification_args(");
          int tmp5 = 0;
          if((QueueRequest != null) && __isset.queueRequest)
          {
            if(0 < tmp5++) { sb.Append(", "); }
            sb.Append("QueueRequest: ");
            QueueRequest.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }


      public partial class SendNotificationResult : TBase
      {
        private global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueResponse _success;
        private global::APIGateway.Thrift.Generated.BaseTypes.NetworkException _ne;

        public global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::APIGateway.Thrift.Generated.BaseTypes.NetworkException Ne
        {
          get
          {
            return _ne;
          }
          set
          {
            __isset.ne = true;
            this._ne = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool ne;
        }

        public SendNotificationResult()
        {
        }

        public SendNotificationResult DeepCopy()
        {
          var tmp6 = new SendNotificationResult();
          if((Success != null) && __isset.success)
          {
            tmp6.Success = (global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueResponse)this.Success.DeepCopy();
          }
          tmp6.__isset.success = this.__isset.success;
          if((Ne != null) && __isset.ne)
          {
            tmp6.Ne = (global::APIGateway.Thrift.Generated.BaseTypes.NetworkException)this.Ne.DeepCopy();
          }
          tmp6.__isset.ne = this.__isset.ne;
          return tmp6;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::APIGateway.Thrift.Generated.NotificationTypes.NotificationQueueResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Ne = new global::APIGateway.Thrift.Generated.BaseTypes.NetworkException();
                    await Ne.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("SendNotification_result");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                field.Name = "Success";
                field.Type = TType.Struct;
                field.ID = 0;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.ne)
            {
              if (Ne != null)
              {
                field.Name = "Ne";
                field.Type = TType.Struct;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await Ne.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SendNotificationResult other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
            && ((__isset.ne == other.__isset.ne) && ((!__isset.ne) || (System.Object.Equals(Ne, other.Ne))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Ne != null) && __isset.ne)
            {
              hashcode = (hashcode * 397) + Ne.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("SendNotification_result(");
          int tmp7 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp7++) { sb.Append(", "); }
            sb.Append("Success: ");
            Success.ToString(sb);
          }
          if((Ne != null) && __isset.ne)
          {
            if(0 < tmp7++) { sb.Append(", "); }
            sb.Append("Ne: ");
            Ne.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }

    }

  }
}
