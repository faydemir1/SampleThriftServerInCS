/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace APIGateway.Thrift.Generated.NotificationTypes
{

  public partial class NotificationQueueResponse : TBase
  {
    private int _value;
    private bool _success;
    private List<global::APIGateway.Thrift.Generated.BaseTypes.Result> _results;
    private global::APIGateway.Thrift.Generated.BaseTypes.ResponseBase _responseBase;

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public List<global::APIGateway.Thrift.Generated.BaseTypes.Result> Results
    {
      get
      {
        return _results;
      }
      set
      {
        __isset.results = true;
        this._results = value;
      }
    }

    public global::APIGateway.Thrift.Generated.BaseTypes.ResponseBase ResponseBase
    {
      get
      {
        return _responseBase;
      }
      set
      {
        __isset.responseBase = true;
        this._responseBase = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @value;
      public bool success;
      public bool results;
      public bool responseBase;
    }

    public NotificationQueueResponse()
    {
    }

    public NotificationQueueResponse DeepCopy()
    {
      var tmp2 = new NotificationQueueResponse();
      if(__isset.@value)
      {
        tmp2.Value = this.Value;
      }
      tmp2.__isset.@value = this.__isset.@value;
      if(__isset.success)
      {
        tmp2.Success = this.Success;
      }
      tmp2.__isset.success = this.__isset.success;
      if((Results != null) && __isset.results)
      {
        tmp2.Results = this.Results.DeepCopy();
      }
      tmp2.__isset.results = this.__isset.results;
      if((ResponseBase != null) && __isset.responseBase)
      {
        tmp2.ResponseBase = (global::APIGateway.Thrift.Generated.BaseTypes.ResponseBase)this.ResponseBase.DeepCopy();
      }
      tmp2.__isset.responseBase = this.__isset.responseBase;
      return tmp2;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Value = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list3 = await iprot.ReadListBeginAsync(cancellationToken);
                  Results = new List<global::APIGateway.Thrift.Generated.BaseTypes.Result>(_list3.Count);
                  for(int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    global::APIGateway.Thrift.Generated.BaseTypes.Result _elem5;
                    _elem5 = new global::APIGateway.Thrift.Generated.BaseTypes.Result();
                    await _elem5.ReadAsync(iprot, cancellationToken);
                    Results.Add(_elem5);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                ResponseBase = new global::APIGateway.Thrift.Generated.BaseTypes.ResponseBase();
                await ResponseBase.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("NotificationQueueResponse");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.@value)
        {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.success)
        {
          field.Name = "success";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Results != null) && __isset.results)
        {
          field.Name = "results";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Results.Count), cancellationToken);
            foreach (global::APIGateway.Thrift.Generated.BaseTypes.Result _iter6 in Results)
            {
              await _iter6.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ResponseBase != null) && __isset.responseBase)
        {
          field.Name = "responseBase";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await ResponseBase.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NotificationQueueResponse other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (System.Object.Equals(Value, other.Value))))
        && ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.results == other.__isset.results) && ((!__isset.results) || (TCollections.Equals(Results, other.Results))))
        && ((__isset.responseBase == other.__isset.responseBase) && ((!__isset.responseBase) || (System.Object.Equals(ResponseBase, other.ResponseBase))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.@value)
        {
          hashcode = (hashcode * 397) + Value.GetHashCode();
        }
        if(__isset.success)
        {
          hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        if((Results != null) && __isset.results)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Results);
        }
        if((ResponseBase != null) && __isset.responseBase)
        {
          hashcode = (hashcode * 397) + ResponseBase.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("NotificationQueueResponse(");
      int tmp7 = 0;
      if(__isset.@value)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("Value: ");
        Value.ToString(sb);
      }
      if(__isset.success)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if((Results != null) && __isset.results)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("Results: ");
        Results.ToString(sb);
      }
      if((ResponseBase != null) && __isset.responseBase)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("ResponseBase: ");
        ResponseBase.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
